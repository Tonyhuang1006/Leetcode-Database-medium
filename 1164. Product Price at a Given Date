Table: Products

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| product_id    | int     |
| new_price     | int     |
| change_date   | date    |
+---------------+---------+
(product_id, change_date) is the primary key of this table.
Each row of this table indicates that the price of some product was changed to a new price at some date.
 

Write an SQL query to find the prices of all products on 2019-08-16. Assume the price of all products before any change is 10.

Return the result table in any order.

The query result format is in the following example.

 

Example 1:

Input: 
Products table:
+------------+-----------+-------------+
| product_id | new_price | change_date |
+------------+-----------+-------------+
| 1          | 20        | 2019-08-14  |
| 2          | 50        | 2019-08-14  |
| 1          | 30        | 2019-08-15  |
| 1          | 35        | 2019-08-16  |
| 2          | 65        | 2019-08-17  |
| 3          | 20        | 2019-08-18  |
+------------+-----------+-------------+
Output: 
+------------+-------+
| product_id | price |
+------------+-------+
| 2          | 50    |
| 1          | 35    |
| 3          | 10    |
+------------+-------+

Solution:

WITH t1 AS (SELECT product_id FROM Products),
t2 AS (SELECT *, 
       ROW_NUMBER() OVER(PARTITION BY product_id ORDER BY change_date DESC) "ranking"
      FROM Products
      WHERE change_date <= "2019-08-16")
      
SELECT t1.product_id, IFNULL(new_price, 10) "price" 
FROM t1
LEFT JOIN t2
ON t1.product_id = t2.product_id AND ranking = 1
GROUP BY 1;
