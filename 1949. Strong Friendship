Table: Friendship

+-------------+------+
| Column Name | Type |
+-------------+------+
| user1_id    | int  |
| user2_id    | int  |
+-------------+------+
(user1_id, user2_id) is the primary key for this table.
Each row of this table indicates that the users user1_id and user2_id are friends.
Note that user1_id < user2_id.
 

A friendship between a pair of friends x and y is strong if x and y have at least three common friends.

Write an SQL query to find all the strong friendships.

Note that the result table should not contain duplicates with user1_id < user2_id.

Return the result table in any order.

The query result format is in the following example.

 

Example 1:

Input: 
Friendship table:
+----------+----------+
| user1_id | user2_id |
+----------+----------+
| 1        | 2        |
| 1        | 3        |
| 2        | 3        |
| 1        | 4        |
| 2        | 4        |
| 1        | 5        |
| 2        | 5        |
| 1        | 7        |
| 3        | 7        |
| 1        | 6        |
| 3        | 6        |
| 2        | 6        |
+----------+----------+
Output: 
+----------+----------+---------------+
| user1_id | user2_id | common_friend |
+----------+----------+---------------+
| 1        | 2        | 4             |
| 1        | 3        | 3             |
+----------+----------+---------------+
Explanation: 
Users 1 and 2 have 4 common friends (3, 4, 5, and 6).
Users 1 and 3 have 3 common friends (2, 6, and 7).
We did not include the friendship of users 2 and 3 because they only have two common friends (1 and 6).

Solution 1:

WITH friend AS (SELECT user1_id, user2_id FROM Friendship
               UNION 
               SELECT user2_id "user1_id", user1_id "user2_id" FROM Friendship)

SELECT a.user1_id, a.user2_id, COUNT(c.user2_id) "common_friend"
FROM Friendship a
JOIN friend b
ON a.user1_id = b.user1_id
JOIN friend c
ON a.user2_id = c.user1_id
AND b.user2_id = c.user2_id
GROUP BY 1, 2
HAVING COUNT(c.user2_id) >= 3;

Soultion 2:

WITH friend AS (SELECT user1_id "user_id", user2_id "friend_id" FROM Friendship
               UNION 
               SELECT user2_id "user_id", user1_id "friend_id" FROM Friendship)
               
SELECT f1.user_id "user1_id", f2.user_id "user2_id", COUNT(f1.friend_id) "common_friend"
FROM friend f1
JOIN friend f2
ON f1.friend_id = f2.friend_id
AND f1.user_id < f2.user_id
JOIN Friendship f3
ON f1.user_id = f3.user1_id
AND f2.user_id = f3.user2_id
GROUP BY 1, 2
HAVING COUNT(f1.friend_id) >= 3;
